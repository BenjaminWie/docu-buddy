task1:
  agent: code_segmenter
  description: >
    Take the raw code text as input and enhance it by injecting well-written docstrings into each function and class.
    The code structure must remain unchanged. Only add or improve docstrings based on the logic of the code.
    Return the entire updated code as a single string.
  inputs:
    - code_text
  expected_output:
    - explained_code  # The original code enriched with meaningful docstrings


task2:
  agent: developer_explainer
  description: >
    Take the segmented code components and the developer prompt.
    Provide a detailed technical explanation highlighting logic, algorithms, structure, and best practices per code component.
    Focus on developer needs and insights.
  inputs:
    - explained_code
    - user_prompt
  expected_output:
    - developer_explanation  # technical detailed explanations

task3:
  agent: business_explainer
  description: >
    Take the segmented code components and the business prompt.
    Provide a business-focused explanation interpreting the purpose and value of each code component.
    Highlight business impact, operational importance, and benefits in a non-technical way.
  inputs:
    - explained_code
    - user_prompt
  expected_output:
    - business_explanation  # business-level understandable explanations
